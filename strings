longest substring without repiting characters

function lengthOfLongestSubstring(s){
   let windowsCharsMap = {};
   let windowStart = 0;
   let maxLength = 0;
   
   for (let i = 0 ; i < s.length ; i++ ) {
      const endChar = s[i] ;
       if(windowCharMap[endChar] >= windowStart) {
         windowStart = windowCharMap[endChar] + 1
       }
       
       windowsCharMap[endChar] = i;
       maxLength = Math.max(maxLength, i - maxLength + 1);
   }
   
   return maxLength
}

module.exports = lengthOfLongestSubstring;


longest Palindromic substring

function longestPalindrome(s) {
let startIndex = 0;
let maxLength = 0;
 
   function expandAroundMiddle(left, right) {
     while (left >= 0 && right < s.length && s[left] === s[right] {
       const currentPalLength = right - left + 1;
       if(currentPalLength > maxLength) {
          maxLength = currentPalLength;
          startIndex = left;
       }
       left -= 1
       right += 1
     }
   }
   
   for (let i = 0; i < s.length; i++) {
      expandAroundMiddle(i - 1, i + 1);
      expandAroundMiddle(i , i + 1);
   }
   
   return s.slice(startIndex, startIndex + maxLength);
}

module.exports = longestPalindrome

